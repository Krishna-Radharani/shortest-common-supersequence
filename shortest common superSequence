class Solution {
public:
    string shortestCommonSupersequence(string s1, string s2) {
       int n = s1.length(), m = s2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1)); // Initialize dp table
        //using tabulation
        for(int index2=0;index2<=m;index2++) dp[0][index2]= index2;
        for(int index1=0;index1<=n;index1++) dp[index1][0]=index1;
        for(int index1=1;index1<=n;index1++){
            for(int index2=1;index2<=m;index2++){
                if (s1[index1-1] == s2[index2-1]) {
                      dp[index1][index2] = 1 + dp[index1 - 1][index2 - 1];
        }

        // If characters don't match, take minimum of insertions from both strings
        else dp[index1][index2] = 1 + min(
            dp[index1 - 1][index2],   // Remove from s1
            dp [index1][index2 - 1] );   // Remove from s2);
                
            }
        }
        /** start printing from last cell  **/
        string str="";
        int i=n,j=m;
        while(i>0 and j>0){ //if both are  satisfied
            if(s1[i-1]==s2[j-1]){
              str+=s1[i-1]; //we are using 1 based indexing
              i--;
              j--;
            }
            else if(dp[i][j-1]<dp[i-1][j]){ //before moving left store the char
                str+=s2[j-1];
               j--;
            }
            else{
                str+=s1[i-1];
                i--;//befor moving up store the char
            }
        }
        while(i!=0){
            str+=s1[i-1];
            i--;
        }
        while(j!=0){
            str+=s2[j-1];
            j--;
        }
        reverse(begin(str),end(str));
        return str;
    }
};
